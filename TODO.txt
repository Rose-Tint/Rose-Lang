TODO:
    - WRITE TESTS
    - Change Rose file-extensions
        - from ".th"
        - to ".ro" or ".rose"
    - Implement context and constraints
    - Allow constructor-operators
        - decide syntactic difference
            - initial symbol, or something else?
    - Rename `Expr` to `Top`
    - change `NewVar`'s `TypeDecl` parameter to just `Type`
    - Problem with function application in parser
        - Lambdas parse individually
        - i.e. `a b => a` == `a (b => a)`
        - i.e. `a => a + 1` == `(a => a) + 1`

IN-PROGRESS:
    - LLVM back-end
    - add Type inference
        - type-system already (mostly) implemented, just not used.
    - ideas to allow `Infer` (and `Solver`?) to update
      the symbol-table:
        - use `State` while analyzing top-level expressions
        - allow `Solver` to modify a type-env when solving
        - `Infer = WriterT Cons (StateT Int Analyzer)`
            - the problem is, Analyzer imports Infer.
            - i could make `Infer` a transformer to be
              able to use in monadically in Analyzer,
              but that doesnt give access to the table.
        - Maybe just completely give up on Analyzer
            - violates "seperation of concerns"