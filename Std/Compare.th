module Std.Compare where


export data Ordering
    := LT
    |= EQ
    |= GT


export trait Eq a {
    pure (==) => a, a, Boolean;
    pure (==) => a, a, Boolean;
}

export trait { Eq a }, Ord a {
    pure (<)   => a, a, Boolean;
    pure (<=)  => a, a, Boolean;
    pure (>)   => a, a, Boolean;
    pure (>=)  => a, a, Boolean;
    pure (<=>) => a, a, Ordering;
}

export trait Logical a {
    pure asBool => a, Boolean;
    pure (&&) => a, a, Boolean;
    pure (||) => a, a, Boolean;
    pure (^^) => a, a, Boolean;
    pure not => a, Boolean;
}


export pure min => { Ord a }, a, a, a;
min a b := match (a <=> b) {
        [LT] := a;
        [EQ] := a;
        [GT] := b;
    };

export pure max => { Ord a }, a, a, a;
max a b := match (a <=> b) {
        [LT] := b;
        [EQ] := b;
        [GT] := a;
    };

export pure clamp => { Ord a }, a, a, a, a;
clamp mn mx x := min mn (max mx x);


impl Ord {
    (<) := (not . (>=));
    a <= b := (a < b) || (a == b);
    (>) := (not . (<=));
    a >= b := (a > b) || (a == b);
}

impl Logical {
    a && b := asBool a && asBool b;
    a || b := asBool a || asBool b;
    a ^^ b := asBool a ^^ asBool b;
    not := not . asBool;
}

impl Logical Int {
    asBool [0] := False;
    asBool n := True;
}

impl Logical Boolean {
    asBool b := b;
    [True] && b := b;
    [False] && b := False;
    [True] || b := True;
    [False] || b := b;
    [True] ^^ b := not b;
    [False] ^^ b := b;
}
