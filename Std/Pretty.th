module Std.Pretty where


#[inline(pretty)]
trait Pretty a {
    pure pretty => a, String;
    pure fmt => a, Fmt, String;
}


data Fmt := Fmt => Int


#[inline((+|))]
pure (+|) => { Pretty a }, String, a, String;
str +| a := str + pretty a;

#[inline((|+))]
pure (|+) => { Pretty a }, a, String, String;
a |+ str := pretty a + str;

#[inline((|+|))]
pure (|+|) => { Pretty a, Pretty b }, a, b, String;
a |+| b := pretty a + pretty b;

#[inline((.|))]
pure (.|) => { Pretty a }, Int, a, String;
n .| a := fmt (Fmt n) a;


impl Pretty {
    fmt _ := pretty;
}

impl Pretty Char {
    pretty := charToString;
}

impl Pretty String {
    pretty s := a;
    fmt [Fmt p] s := take p s;
}

impl Pretty Int {
    pretty n := fmt (Fmt n) n;
    fmt [Fmt p] n {
        let mut x<Int> := n % (10 * p);
        let mut str<String> := default;
        loop (True) {
            rem = x % 10;
            x = x / 10;
            let ch<Char> := '0' + rem;
            str = append ch str;
            if (x < 10) { return str; };
        };
    }
}
