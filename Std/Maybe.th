module Std.Maybe where

import Std.Data.List
import Std.Data.Alternative


export data Maybe a
    := Nothing
    |= Just => a


impl Alternative (Maybe a) {
    [Nothing] <|> m := m;
    m <|> _ := m;
}


export pure maybe => (a, b), Maybe a, Maybe b;
maybe _ [Nothing] := Nothing;
maybe f [Just a] := Just (f a);

export pure maybeApply => b, Maybe a, (a, b), b;
maybeApply b [Nothing] f := b;
maybeApply _ [Just a] f := f a;

export pure exists => Maybe a, Boolean;
exists [Nothing] := False;
exists _ := True;

export pure (:?) => Maybe a, (a, b), Maybe b;
[Nothing] :? _ := Nothing;
[Just a] :? f := Just (f a);

export pure filterMaybes => List (Maybe a), List a;
filterMaybes [Null] := Null;
filterMaybes [List head tail] {
    if (head == Nothing) {
        return filterMaybes tail;
    } else {
        return List head (filterMaybes tail);
    };
}
