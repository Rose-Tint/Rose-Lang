import export Std.Data.Default
import export Std.Data.Compare

invert [(Node l v r)] {
    return((Node ((v (invert r)) (invert l))););
}
invert [(Empty )] {
    return((Empty ););
}
pure export invert<(Tree a  Tree a )>
size [(Node l _ r)] {
    return((+ (+ (size l) (size r)) 1););
}
size [(Empty )] {
    return(0;);
}
pure export size<(Tree a  Int )>
height [(Node l _ r)] {
    return((+ ((max (height l)) (height r)) 1););
}
height [(Empty )] {
    return(0;);
}
pure export height<(Tree a  Int )>
lookup a tree {
    return(match (((search a) tree)) {
        [(Node _ v _)] {
            return((Just v););
        }
        [(Empty )] {
            return((Nothing ););
        }
    });
}
pure export lookup<Ord a: (a  Tree a  Maybe a )>
search a [(Node l _ r)] {
    return(match ((<=> a v)) {
        [(GT )] {
            return(((search a) r););
        }
        [(EQ )] {
            return((Node ((v l) r)););
        }
        [(LT )] {
            return(((search a) l););
        }
    });
}
search a [(Empty )] {
    return((Empty ););
}
pure export search<Ord a: (a  Tree a  Tree a )>
insert a [(Node l v r)] {
    return(match ((<=> a v)) {
        [(GT )] {
            return((Node ((v l) ((insert a) r))););
        }
        [(EQ )] {
            return((Node ((v l) r)););
        }
        [(LT )] {
            return((Node ((v ((insert a) l)) r)););
        }
    });
}
pure export insert<Ord a: (a  Tree a  Tree a )>
export data Tree a    = Node exporta  Tree a  Tree a 
    | Empty export


