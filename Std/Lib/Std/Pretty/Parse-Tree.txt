import export Std.Function
import export Std.Data.Default

impl <> Pretty Int  {
    fmt [(Fmt p)] n {
        let impure <(Int )>x = (% n (* 10 p));
        let impure <(DELAYED)>str = default;
        loop ((< x 10);) {
            let impure <(DELAYED)>rem = (% x 10);
            x = (/ x 10);
            str = ((append (intToChar (% x 10))) str);
        }
        returnstr;
    }
    pretty n {
        return(((fmt (Fmt n)) n););
    }
}
impl <> Pretty String  {
    fmt [(Fmt p)] s {
        return(((take p) s););
    }
    pretty  {
        return(id;);
    }
}
impl <> Pretty Char  {
    pretty  {
        return(charToString;);
    }
}
impl <> Pretty  {
    fmt _ {
        return(pretty;);
    }
}
.| n a {
    return(((fmt (Fmt n)) a););
}
pure export .|<Pretty a: (Int  a  String )>
|+| a b {
    return((++ (pretty a) (pretty b)););
}
pure export |+|<Pretty a, Pretty b: (a  b  String )>
|+ a str {
    return((++ (pretty a) str););
}
pure export |+<Pretty a: (a  String  String )>
+| str a {
    return((++ str (pretty a)););
}
pure export +|<Pretty a: (String  a  String )>
export data Fmt     = Fmt exportInt 

export trait <> Pretty a {
    pure export fmt<(a  Fmt  String )>
    pure export pretty<(a  String )>
}

