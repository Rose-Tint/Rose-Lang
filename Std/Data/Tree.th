module Std.Data.Tree where



export data Tree a
    := Empty
    |= Node => a, Tree a, Tree a



export pure insert => { Ord a }, a, Tree a, Tree a;
insert a [Node v l r] := match (a <=> v) {
        [LT] := (Node v (insert a l) r);
        [GT] := (Node v l (insert a r));
        [EQ] := (Node v l r);
    };


export pure search => { Ord a }, a, Tree a, Tree a;
search a [Empty] := Empty;
search a [Node _ l r] := match (a <=> v) {
        [LT] := (search a l);
        [EQ] := (Node v l r);
        [GT] := (search a r);
    };


export pure height => Tree a, Int;
height [Empty] := 0;
height [Node _ l r] := (max (height l) (height r)) + 1;


export pure size => Trea a, Int;
size [Empty] := 0;
size [Node _ l r] := (size l + size r) + 1;


export pure invert => Tree a, Tree a;
invert [Empty] := Empty;
invert [Node v l r] := Node v (invert r) (invert l);
